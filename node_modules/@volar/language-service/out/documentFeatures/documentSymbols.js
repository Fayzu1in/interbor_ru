var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
const transformer = require("../transformer");
const shared = require("@volar/shared");
const common_1 = require("../utils/common");
function register(context) {
    return (uri) => {
        return (0, featureWorkers_1.documentFeatureWorker)(context, uri, file => !!file.capabilities.documentSymbol, (plugin, document) => __awaiter(this, void 0, void 0, function* () { var _a; return (_a = plugin.findDocumentSymbols) === null || _a === void 0 ? void 0 : _a.call(plugin, document); }), (data, map) => map
            ? data
                .map(symbol => transformer.asDocumentSymbol(symbol, range => map.toSourceRange(range)))
                .filter(shared.notEmpty)
            : data, results => {
            for (let i = 0; i < results.length; i++) {
                for (let j = 0; j < results.length; j++) {
                    if (i === j)
                        continue;
                    results[i] = results[i].filter(child => {
                        var _a;
                        for (const parent of results[j]) {
                            if ((0, common_1.isInsideRange)(parent.range, child.range)) {
                                (_a = parent.children) !== null && _a !== void 0 ? _a : (parent.children = []);
                                parent.children.push(child);
                                return false;
                            }
                        }
                        return true;
                    });
                }
            }
            return results.flat();
        });
    };
}
exports.register = register;
//# sourceMappingURL=documentSymbols.js.map